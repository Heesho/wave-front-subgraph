type Directory @entity(immutable: false) {
  id: ID!
  index: BigInt!
  txCount: BigInt!
  swapVolume: BigDecimal!
  liquidity: BigDecimal!
  curateVolume: BigDecimal!
  contents: BigInt!
}

type User @entity(immutable: false) {
  id: ID!
  txCount: BigInt!

  referrer: User
  referrals: [User!]! @derivedFrom(field: "referrer")

  tokensOwned: [Token!]! @derivedFrom(field: "owner")
  tokenPositions: [TokenPosition!]! @derivedFrom(field: "user")
  swaps: [Swap!]! @derivedFrom(field: "user")

  moderator: [Moderator!]! @derivedFrom(field: "user")
  contentOwned: [ContentPosition!]! @derivedFrom(field: "owner")
  contentCreated: [ContentPosition!]! @derivedFrom(field: "creator")
  curates: [Curate!]! @derivedFrom(field: "user")
}

type Token @entity(immutable: false) {
  id: ID!
  name: String!
  symbol: String!
  uri: String!
  owner: User!

  txCount: BigInt!
  swapVolume: BigDecimal!
  liquidity: BigDecimal!
  totalSupply: BigDecimal!
  marketCap: BigDecimal!
  quoteVirtReserve: BigDecimal!
  quoteRealReserve: BigDecimal!
  tokenReserve: BigDecimal!
  marketPrice: BigDecimal!
  floorPrice: BigDecimal!
  holders: BigInt!

  contents: BigInt!
  contentBalance: BigDecimal!
  curateVolume: BigDecimal!

  creatorRewardsQuote: BigDecimal!
  curatorRewardsQuote: BigDecimal!
  holderRewardsQuote: BigDecimal!
  holderRewardsToken: BigDecimal!

  treasuryRevenueQuote: BigDecimal!
  treasuryRevenueToken: BigDecimal!
  contentRevenueQuote: BigDecimal!
  contentRevenueToken: BigDecimal!

  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  isModerated: Boolean!

  tokenPositions: [TokenPosition!]! @derivedFrom(field: "token")
  swaps: [Swap!]! @derivedFrom(field: "token")
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  tokenHourData: [TokenHourData!]! @derivedFrom(field: "token")
  tokenMinuteData: [TokenMinuteData!]! @derivedFrom(field: "token")

  moderators: [Moderator!]! @derivedFrom(field: "token")
  contentPositions: [ContentPosition!]! @derivedFrom(field: "token")
  curates: [Curate!]! @derivedFrom(field: "token")
  contentDayData: [ContentDayData!]! @derivedFrom(field: "token")
  contentHourData: [ContentHourData!]! @derivedFrom(field: "token")
  contentMinuteData: [ContentMinuteData!]! @derivedFrom(field: "token")
}

type TokenPosition @entity(immutable: false) {
  id: ID!
  token: Token!
  user: User!
  balance: BigDecimal!
  debt: BigDecimal!

  contentCreated: BigInt!
  createdCurations: BigInt!
  createdValue: BigDecimal!

  contentOwned: BigInt!
  contentBalance: BigDecimal!
  curationSpend: BigDecimal!

  creatorRevenueQuote: BigDecimal!
  ownerRevenueQuote: BigDecimal!

  affiliateRevenueQuote: BigDecimal!
  affiliateRevenueToken: BigDecimal!

  curatorRevenueQuote: BigDecimal!
  curatorRevenueToken: BigDecimal!
}

type Swap @entity(immutable: false) {
  id: ID!
  token: Token!
  user: User!
  blockNumber: BigInt!
  timestamp: BigInt!
  quoteIn: BigDecimal!
  quoteOut: BigDecimal!
  tokenIn: BigDecimal!
  tokenOut: BigDecimal!
  marketPrice: BigDecimal!
  floorPrice: BigDecimal!
}

type TokenDayData @entity(immutable: false) {
  id: ID!
  token: Token!
  timestamp: BigInt!
  marketPrice: BigDecimal!
  floorPrice: BigDecimal!
  volume: BigDecimal!
}

type TokenHourData @entity(immutable: false) {
  id: ID!
  token: Token!
  timestamp: BigInt!
  marketPrice: BigDecimal!
  floorPrice: BigDecimal!
  volume: BigDecimal!
}

type TokenMinuteData @entity(immutable: false) {
  id: ID!
  token: Token!
  timestamp: BigInt!
  marketPrice: BigDecimal!
  floorPrice: BigDecimal!
  volume: BigDecimal!
}

type ContentPosition @entity(immutable: false) {
  id: ID!
  tokenId: BigInt!
  token: Token!
  creator: User!
  owner: User!
  uri: String!
  price: BigDecimal!
  nextPrice: BigDecimal!
  isApproved: Boolean!
  curationCount: BigInt!
}

type Curate @entity(immutable: false) {
  id: ID!
  token: Token!
  creator: User!
  prevOwner: User!
  user: User!
  tokenId: BigInt!
  uri: String!
  blockNumber: BigInt!
  timestamp: BigInt!
  price: BigDecimal!
  surplus: BigDecimal!
}

type ContentDayData @entity(immutable: false) {
  id: ID!
  token: Token!
  timestamp: BigInt!
  volume: BigDecimal!
  surplus: BigDecimal!
}

type ContentHourData @entity(immutable: false) {
  id: ID!
  token: Token!
  timestamp: BigInt!
  volume: BigDecimal!
  surplus: BigDecimal!
}

type ContentMinuteData @entity(immutable: false) {
  id: ID!
  token: Token!
  timestamp: BigInt!
  volume: BigDecimal!
  surplus: BigDecimal!
}

type Moderator @entity(immutable: false) {
  id: ID!
  user: User!
  token: Token!
  isModerator: Boolean!
}

type Content @entity(immutable: false) {
  id: ID!
  token: Token!
}

type Rewarder @entity(immutable: false) {
  id: ID!
  token: Token!
}
